#
#   Â© Copyright 2020 Hewlett Packard Enterprise Development LP
#
#   This file was auto-generated by the Python SDK generator; DO NOT EDIT.
#

from ..resource import Resource, Collection
from ..exceptions import NimOSAPIOperationUnsupported

class Certificate(Resource):
    """
    Manage certificates used by SSL/TLS.

    Parameters:
    - id           : Dummy identifier (copy of name).
    - name         : Name of certficiate.
    - subject      : Subject for the certificate.
    - dnslist      : DNS list for subject alternate name.
    - iplist       : List of IP addresses for subject alternate name.
    - cert_list    : Certificate information for certificates in file.
    - csr          : Certificate Signing Request information.
    - valid_days   : Number of days certificate is valid.
    - input        : Certificate input for import operation. The format of the input is a base-64 encoded string for either PKCS-12 input or PEM encoded certificate(s).  PEM certificate(s) may also be specified as-is, with newlines replaced by "\n".
    - password     : Password used to protect PKCS-12 certificate bundle.
    - https        : For use command, Use specified type for HTTPS access.
    - apis         : For use command, use specified type for REST API access.
    - force        : Force regeneration or import when certificate already exists.
    - check        : Check existing group certificate parameters against inputs.
    - pkcs12       : Input is a PKCS-12 bundle if true.
    - trusted      : Certificate is an imported trusted certificate.
    - reload_https : HTTPS certificate changed, so needs to be reloaded.
    - reload_apis  : API certificate changed, so needs to be reloaded.
    """

    def gen(self, name, dnslist=None, force=False, iplist=None, subject=None, valid_days=None):
        """
        Generate a certificate or certificate signing request (CSR).

        Parameters:
        - name       : Name of the certificate to generate. The allowed values are "array", "group", "custom", and "custom-csr". The "subject", "dnslist", and "iplist" values are only allowed for the "custom" and "custom-csr" names.
        - subject    : Subject or common name for the certificate. The default value for the subject name is the hostname of the controller. If the value is "-", then an attempt is made to extract the subject name from the existing group certificate, if there is one.  The value is treated as a full subject name if it begins with "/", in the format that OpenSSL uses.  Otherwise, it is taken as the Common Name value. The allowed character sets and field lengths are specified in RFC 3280, and possibly further restricted by Certificate Authorities' rules.
        - dnslist    : A comma separated list of DNS names to add to the subject alternate name field of the host certificate.  If the value is "-", then an attempt is made to extract the DNS names from the existing group certificate, if there is one.
        - iplist     : A comma separated list of IP addresses to add to the subject alternate name field of the host certificate. If the value is "-", then an attempt is made to extract the IP addresses from the existing group certificate, if there is one.
        - valid_days : Number of days for which the certificate will be valid. The default and maximum value for the number of valid days is 3650.
        - force      : Force overwriting of existing certificate or signing request.
        """

        return self.collection.gen(self.id, name, dnslist, force, iplist, subject, valid_days)

    def import_cert(self, name, force=False, from_host=None, input=None, password=None, pkcs12=False, trusted=False):
        """
        Import a custom CA (custom-ca), signed custom certificate (cus- tom), or a trusted certificate to be used by internal clients.  The custom-ca certificate must be imported before the signed custom certificate. After the custom certifcate is imported and verified, it will be installed for use. The imported certificate should be valid for use as both SSL server and client, since it may be used as an outbound client certificate. A combined bundle of key, CA certificate(s), and signed certificate may also be imported using the PKCS12 format. This format is most useful for installing a wildcard certificate.

        Parameters:
        - name      : Name of the certificate to import.
        - input     : Certificate input for import operation. The format of the input is a base-64 encoded string for either PKCS-12 input or PEM encoded certificate(s).  PEM certificate(s) may also be specified as-is, with newlines replaced by "\n".
        - from_host : With "trusted" set to "true", attempt an SSL connection to the specified "host:port", and import the presented certificate chain into the trusted certificate list.
        - trusted   : Import a certificate to add to the list of certificates trusted by internal SSL clients. The certificate can either be read from standard input, or retrieved from a specified host. When this flag is present, the names "custom-ca", "custom", "group", "array-ca", and "array" are reserved. The input must either contain an entire chain to a root CA certificate, be a self-signed certificate, or be issued by an already installed trusted certificate chain.
        - pkcs12    : Import a PKCS12 file that contains a private key, CA certificate(s), and signed host certificate. The name argument must be "custom".
        - password  : Password to unlock the PKCS-12 bundle.
        - force     : Force overwriting of existing certificate, if it exists.
        """

        return self.collection.import_cert(self.id, name, force, from_host, input, password, pkcs12, trusted)

    def verify(self, name, checkend=None, ocsp=False):
        """
        Verify validity of a certificate.

        Parameters:
        - name     : Name of the certificate to verify.
        - checkend : Check if certificate expires within a certain number of days.
        - ocsp     : Check validity of the certificate using OCSP, if provided.
        """

        return self.collection.verify(self.id, name, checkend, ocsp)

class CertificateList(Collection):
    resource = Certificate
    resource_type = "certificates"

    def gen(self, name, dnslist=None, force=False, iplist=None, subject=None, valid_days=None):
        """
        Generate a certificate or certificate signing request (CSR).

        Parameters:
        - name       : Name of the certificate to generate. The allowed values are "array", "group", "custom", and "custom-csr". The "subject", "dnslist", and "iplist" values are only allowed for the "custom" and "custom-csr" names.
        - subject    : Subject or common name for the certificate. The default value for the subject name is the hostname of the controller. If the value is "-", then an attempt is made to extract the subject name from the existing group certificate, if there is one.  The value is treated as a full subject name if it begins with "/", in the format that OpenSSL uses.  Otherwise, it is taken as the Common Name value. The allowed character sets and field lengths are specified in RFC 3280, and possibly further restricted by Certificate Authorities' rules.
        - dnslist    : A comma separated list of DNS names to add to the subject alternate name field of the host certificate.  If the value is "-", then an attempt is made to extract the DNS names from the existing group certificate, if there is one.
        - iplist     : A comma separated list of IP addresses to add to the subject alternate name field of the host certificate. If the value is "-", then an attempt is made to extract the IP addresses from the existing group certificate, if there is one.
        - valid_days : Number of days for which the certificate will be valid. The default and maximum value for the number of valid days is 3650.
        - force      : Force overwriting of existing certificate or signing request.
        """

        return self._client.perform_resource_action(self.resource_type, id, 'gen', name=name, dnslist=dnslist, force=force, iplist=iplist, subject=subject, valid_days=valid_days)

    def import_cert(self, name, force=False, from_host=None, input=None, password=None, pkcs12=False, trusted=False):
        """
        Import a custom CA (custom-ca), signed custom certificate (cus- tom), or a trusted certificate to be used by internal clients.  The custom-ca certificate must be imported before the signed custom certificate. After the custom certifcate is imported and verified, it will be installed for use. The imported certificate should be valid for use as both SSL server and client, since it may be used as an outbound client certificate. A combined bundle of key, CA certificate(s), and signed certificate may also be imported using the PKCS12 format. This format is most useful for installing a wildcard certificate.

        Parameters:
        - name      : Name of the certificate to import.
        - input     : Certificate input for import operation. The format of the input is a base-64 encoded string for either PKCS-12 input or PEM encoded certificate(s).  PEM certificate(s) may also be specified as-is, with newlines replaced by "\n".
        - from_host : With "trusted" set to "true", attempt an SSL connection to the specified "host:port", and import the presented certificate chain into the trusted certificate list.
        - trusted   : Import a certificate to add to the list of certificates trusted by internal SSL clients. The certificate can either be read from standard input, or retrieved from a specified host. When this flag is present, the names "custom-ca", "custom", "group", "array-ca", and "array" are reserved. The input must either contain an entire chain to a root CA certificate, be a self-signed certificate, or be issued by an already installed trusted certificate chain.
        - pkcs12    : Import a PKCS12 file that contains a private key, CA certificate(s), and signed host certificate. The name argument must be "custom".
        - password  : Password to unlock the PKCS-12 bundle.
        - force     : Force overwriting of existing certificate, if it exists.
        """

        return self._client.perform_resource_action(self.resource_type, id, 'import_cert', name=name, force=force, from_host=from_host, input=input, password=password, pkcs12=pkcs12, trusted=trusted)

    def verify(self, name, checkend=None, ocsp=False):
        """
        Verify validity of a certificate.

        Parameters:
        - name     : Name of the certificate to verify.
        - checkend : Check if certificate expires within a certain number of days.
        - ocsp     : Check validity of the certificate using OCSP, if provided.
        """

        return self._client.perform_resource_action(self.resource_type, id, 'verify', name=name, checkend=checkend, ocsp=ocsp)

    def create(self, **kwargs):
        raise NimOSAPIOperationUnsupported("create operation not supported")
