#
#   Â© Copyright 2020 Hewlett Packard Enterprise Development LP
#
#   This file was auto-generated by the Python SDK generator; DO NOT EDIT.
#

from ..resource import Resource, Collection
from ..exceptions import NimOSAPIOperationUnsupported

class Alarm(Resource):
    """
    View alarms.

    Parameters:
    - id                     : Identifier for the alarm.
    - type                   : Identifier for type of alarm.
    - array                  : The array name where the alarm is generated.
    - curr_onset_event_id    : Identifier for the current onset event.
    - object_id              : Identifier of object operated upon.
    - object_name            : Name of object operated upon.
    - object_type            : Type of the object being operated upon.
    - onset_time             : Time when this alarm was triggered.
    - ack_time               : Time when this alarm was acknowledged.
    - status                 : Status of the operation -- open or acknowledged.
    - user_id                : Identifier of the user who acknowledged the alarm.
    - user_name              : Username of the user who acknowledged the alarm.
    - user_full_name         : Full name of the user who acknowledged the alarm.
    - category               : Category of the alarm.
    - severity               : Severity level of the event.
    - remind_every           : Frequency of notification. This number and the remind_every_unit define how frequent one alarm notification is sent. For example, a value of 1 with the 'remind_every_unit' of 'days' results in one notification every day.
    - remind_every_unit      : Time unit over which to send the number of notification specified in 'remind_every'. For example, a value of 'days' with a 'remind_every' of '1' results in one notification every day.
    - activity               : Description of activity performed and recorded in alarm.
    - next_notification_time : Time when next reminder for the alarm will be sent.
    """

    def acknowledge(self, remind_every_unit=None, remind_every=None):
        """
        Acknowledge an alarm.

        Parameters:
        - id                : ID of the acknowledged alarm.
        - remind_every      : Notification frequency unit.
        - remind_every_unit : Period unit.
        """

        return self.collection.acknowledge(self.id, remind_every, remind_every_unit)

    def unacknowledge(self):
        """
        Unacknowledge an alarm.

        Parameters:
        - id : ID of the acknowledged alarm.
        """

        return self.collection.unacknowledge(self.id)

    def get_summary(self):
        """
        Get alarm count of every category.

        Parameters:
        - id : ID of the alarm.
        """

        return self.collection.get_summary(self.id)

    def bulk_async_acknowledge(self, list):
        """
        Acknowledge a number of alarms.

        Parameters:
        - list : List of alarm objects.
        """

        return self.collection.bulk_async_acknowledge(self.id, list)

    def bulk_async_unacknowledge(self, list):
        """
        Unacknowledge a number of alarms.

        Parameters:
        - list : List of alarm objects with an id for each.
        """

        return self.collection.bulk_async_unacknowledge(self.id, list)

    def bulk_async_update(self, list):
        """
        Update a number of alarms.

        Parameters:
        - list : List of alarm objects to be updated.
        """

        return self.collection.bulk_async_update(self.id, list)

    def bulk_async_delete(self, list):
        """
        Delete a number of alarms.

        Parameters:
        - list : List of alarm objects to be deleted.
        """

        return self.collection.bulk_async_delete(self.id, list)

class AlarmList(Collection):
    resource = Alarm
    resource_type = "alarms"

    def acknowledge(self, id, remind_every_unit=None, remind_every=None):
        """
        Acknowledge an alarm.

        Parameters:
        - id                : ID of the acknowledged alarm.
        - remind_every      : Notification frequency unit.
        - remind_every_unit : Period unit.
        """

        return self._client.perform_resource_action(self.resource_type, id, 'acknowledge', id=id, remind_every_unit=remind_every_unit, remind_every=remind_every)

    def unacknowledge(self, id):
        """
        Unacknowledge an alarm.

        Parameters:
        - id : ID of the acknowledged alarm.
        """

        return self._client.perform_resource_action(self.resource_type, id, 'unacknowledge', id=id)

    def get_summary(self, id):
        """
        Get alarm count of every category.

        Parameters:
        - id : ID of the alarm.
        """

        return self._client.perform_resource_action(self.resource_type, id, 'get_summary', id=id)

    def bulk_async_acknowledge(self, list):
        """
        Acknowledge a number of alarms.

        Parameters:
        - list : List of alarm objects.
        """

        return self._client.perform_resource_action(self.resource_type, id, 'bulk_async_acknowledge', list=list)

    def bulk_async_unacknowledge(self, list):
        """
        Unacknowledge a number of alarms.

        Parameters:
        - list : List of alarm objects with an id for each.
        """

        return self._client.perform_resource_action(self.resource_type, id, 'bulk_async_unacknowledge', list=list)

    def bulk_async_update(self, list):
        """
        Update a number of alarms.

        Parameters:
        - list : List of alarm objects to be updated.
        """

        return self._client.perform_resource_action(self.resource_type, id, 'bulk_async_update', list=list)

    def bulk_async_delete(self, list):
        """
        Delete a number of alarms.

        Parameters:
        - list : List of alarm objects to be deleted.
        """

        return self._client.perform_resource_action(self.resource_type, id, 'bulk_async_delete', list=list)

    def create(self, **kwargs):
        raise NimOSAPIOperationUnsupported("create operation not supported")
